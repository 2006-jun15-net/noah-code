Docker Architecture 
    Docker daemon 
        build images 
        run containers 
    Docker CLI client 
        interprets "docker" commands typed by the dev
        sends stuff to the daemon based on DOCKER_HOST environment 
    The daemon and CLI client communicate with HTTP 

    docker build...
    1. the client uploads the build context to the daemon 
    2. the base image is downloaded from its registry if necessary (default registry is docker.io aka DockerHub)
    3. the layers are built one by one for each command in the Dockerfile
        (possibly copying parts of the build context into the image) 
    4. the last layer is tagged with whatever the command said to tag it with

Creating the Dockerfile    

Step 1:
    what base image you want to use
    Two things in a base image
    1. has most/all of the things we need already, and not too much things we don't 
    2. it's well maintained, updated, used by lots of people 

    you make images from the Dockerfile recipe with "docker build"
    docker build has several important arguments 
        -positional argument: the build context.
            (the folder which will be visible to the image building process)
            (commonly use "." for current directory)
        -f: location of the Dockerfile to use (default to ./Dockerfile)
        -t: tag the image so we can reference it with some name besides a long hash  

    you can have images stored locally
        (they aren't stored in any particular folder, the docker server holds them)
    usually images come from a registry 

    base image examples: ubuntu, alpine, mcr.microsoft.com/dotnet/core/aspnet

    COPY - from the project folder to the folder inside the image filesystem
    WORKDIR 
    CMD or ENTRYPOINT ways to set metadata on the image 

    docker run -it - starts the container, attaches it to the current terminal 
        and allows you to stop with ctrl-c 
    --rm removes container when container is stopped 
    -p -connects the port outside to the port inside 
    Ex) -p <portOutside:portInside> 

Multistage build
    FROM big sdk image 
    COPY source 
    RUN build 
        FROM small runtime image 
        COPY build output from build stage to this stage 
    
    only the last stage will actually be layers in the final image 
    the layers used in previous stages will still be cached on the daemon 
         but they aren't in the final image 
    makes sense when you have large build-time dependencies that are not runtime
        dependencies

Good practices with docker
    -select a good base image with all the dependencies you need 

Docker Commands 
    -docker container prune 
    -docker images prune 
    -docker system prune 
    -docker push 
    -docker login 
    -docker logs
    -docker exec 
