Delegates
    C# gives the ability to treat functions or methods
        like any other piece of data like int or Product etc.
    when we're treating methods as data, we call them Delegates
    There are "delegate types" that represent groups of those delegate values
        (e.g. Action, Func)
    Any delegate can fit in a delegate type based on having the same return type and
        method parameter types

    You can define your own delegate type e.g.:
        public delegate void StringAction(string text);

    ex) Func<int, int, string>: method that takes two ints returns string
        Action<int, int, string>: method that takes two ints and a string returns void

Lambda Expressions
    ex) x => Console.WriteLine(x.ToLower());
    This expression can be passed into a method as an argument

Extension methods
    These are just static methods but they appear to be added to an existing type 
    use "this" before the first parameter in the parameter list
    then call like: value.ExtensionMethod();
    extension methods are just "syntatic sugar" for static methods

LINQ - Language-Integrated Query
    Class full of extension methods for the IEnumerable interface(the one that all collection implement)
    LINQ methods fit into one of a few catagories:
        1. the ones that return some concrete value - e.g. first, Average, Max, Min, Count, Sum
            these ones run right away
        2. the ones that return a sequence (IEnumerable) - e.g. Select, Where, OrderBy, Distinct  
            these ones don't run "yet" - the collection will only really be processed if you loop over it later
            this is called "deferred execution" 
        3. stuff that returns a concrete collection e.g. ToList()
            these ones run right away - by calling ToList at the right time, you can
                take control over that "deferred execution" behavior
        None of them ever modify the original list
    
    LINQ has two syntaxes - all that is the "method syntax"
    there's also the "query syntax"
        ex) from s in strings
            where s.Length > 0
            select s[0];

    in different contexts, sometimes the sequence processing stuff is converted into something besides
        regular C#. for example there is "LINQ to SQL". There's two copies of each LINQ method,
        one for IEnumerable, one for IQueryable

Events
    another kind of "member" like properties, fields, and methods
    an event supports 3 operations:
        - subscribe +=
        - unsubscribe -=
        - call/publish ()

    every event needs a void return delegate type to define what parameters can 
        and will be sent along with the event

Nullable Value type
    use ? to allow value types to have a null value
    e.g. int? x = null;

Relational Database
    tables
        rows
        columns(with data types)

    SQL structured query Language
        1) software that plans out the most efficient way to get some needed result from the dataset
        2) the language we use to tell the software what we want(declarative)
    SQL variants: 
        MySQL
        Oracle SQL
        SQL Server - Transact-SQL aka T-SQL
        PostgreSQL
        SQLite
    Azure cloud
        ways to manage azure:
            https://portal.azure
            azure CLI
            VS & VS  Code

        Dev Essentials free trial
            for the next 1 month:
                $200 credit(permanent notification)
                prices are all as normal for a non-free-trial subscription
            at the one-month mark:
                you'll need to upgrade from 
                "Free Trial" subscription to "Pay As you Go" subscription
            for the next 11 months:
                certain azure services have their own "free monthly usage" allowed
                    (e.g. 1 month of standard-size SQL Server db)
        Everything in azure needs to be parts of a "resource group"
        we'll create:
            resource group  
                SQL Server
                    SQL database
   
SQL
    DML data manipulation language
        these operate on individual rows of tables at a time
        SELECT (querying/ readonly access)
        INSERT
        UPDATE
        DELETE
    DDL data definition language 
        these create or modify objects in the database like tables
        CREATE TABLE, CREATE FUNCTION, etc.
        ALTER TABLE, ALTER VIEW, etc
        DROP TABLE, DROP PROCEDURE, etc 
        TRUNCATE TABLE (remove all rows from a table)
    DCL data control language 
        these have to do with users, user permissions

    SELECT  
        1. FROM what tables should be accessed and possibly joined with others
        2. WHERE filtering rows from those tables on a condition 
        3. GROUP BY grouping sets of rows into one based on having some values in common
        4. HAVING another stage of filtering that can run after the aggregation of GROUP BY
        5. SELECT list the columns we want in the output, and maybe transform the values 
        6. ORDER BY sorting the result rows
    semicolons, not required
    numbers like 123, text like 'abc' 
    the like operator takes a special template string to compare with
		-- _ means any one character
		-- % means any character
		-- [abc] means one of a, b, or c
    Examples:
        Select * from Employee;
        Select '9' + Convert(VARCHAR, 4 + 5);
            //99
        Select FirstName, LastName from Employee Where LastName

    Aggregate functions 
        accept many values and return one
            count, sum, avg, min, Max
    
    Joins
        Cross Join, each row with each row in the other table
        Inner Join: just the rows that match
        Left Join: all of left and only rows that match in right
        Right Join: all of right and only rows that match in left 
        Full join: all rows of both tables 
    
    Use IS NULL and IS NOT NULL for null values

    Sets 
        UNION: gives all rows that are found in either query, without duplicates
        UNION All: keeps duplicates
        INTERSECT: all rows that are in both queries (no duplicates)
        EXCEPT: all rows that are in the first query that are not in the second query

    INSERT INTO 
        Examples:
            INSERT INTO Genre VALUES (100, 'Miscelleanous');
            INSERT INTO Genre (GenreId) VALUES (100, 'Miscelleanous');
    UPDATE
        Examples:
            UPDATE Genre SET Name = 'Misc 1'; --without where this would modify every row
            where GenreId = 101;
    DELETE -- without where, it would delete every row (one by one)
    TRUNCATE TABLE -- deletes all rows all at once

RDBMS anomalies
    update anomaly 
    deletion anomaly 
    insert anomaly

    normalization:
        addresses anomalies, reduces redundancy

        functional dependency: a relationship between two pieces of data or attributes
            for any value of x, then there's only one y
            if two rows have the same x value then they have to have the same y 
            x and y can be multiple columns 
        canidate key:
            minimal set of columns that every other column is dependent on 
            often the set is size one 
        
    schema - namespace for tables and similar objects outside tables
        the default is dbo otherwise you need to refer to the table like "schemaname.tablename"
    ID columns:
        Incrementing integer starting at 1 (identity)
        GUID - global unique identifier, random really long number 
        hi-lo sequence, some advantages of both

    Constraints:
        IDENTITY (autoincrement an integer - does not allow manual inserts)
        NULL (explicitly mark the default allwoing of nulls in that column)
        NOT NULL (null not allowed)
        PRIMARY KEY (implies not null and unique, identifier for the row)
        FOREIGN KEY (carry a reference to another column, and must have a valid value from that column)
        UNIQUE 
        CHECK (checking any expression to be true for a row )
        DEFAULT 

    You can create constraints after the fact on an existing table with ALTER TABLE
    ALTER TABLE (schema.tablename) 
        ADD CONSTRAINT (Constraint name) PRIMARY KEY(columnname(s))
    ALTER TABLE (schema.tablename) 
        ALTER COLUMN (columnname) (type and constraint)

    Multiplicity
        When modelling data, an aspect of their relationships is called multiplicity
        one-to-one  
            technically impossible SQL between two tables - can do one-to-(zero-or-one)
                with a UNIQUE NOT NULL FOREIGN KEY one one of the tables
            or just put "both" parts of data in the same table.
        many-to-one (e.g. one customer places many orders, each order is placed by one customer) 
            need two tables
            with FOREIGN KEY on the table for the "many" side (e.g. order)
        many-to-many (one student is in many courses, one course has many student)
            have a third table for the relationship itself
                having NOT NULL FOREIGN KEYS pointing to the main two tables where together they make the primary key
            this third table is called a "join table" or a "junction table"

        Whenever you put a foreign key on a table,
        you're saying that row can have at most ONE corresponding row in the OTHER table
        Foreign keys don't do anything but throw errors when you would be violating 
            referential integrity so we use (e.g ON DELETE CASCADE, ON UPDATE CASCADE)
        
    Computed columns
        the value is computed when read, not stored
        with option PERSISTED the value is stored
            use the "AS" keyword

    Views - computed tables
        SCHEMABINDING - prevents modifying physical tables that are used to make the view 

    Variables
        DECLARE (@variablename) (type)
        or 
        SET (@variablename) (type)

        variables can be tables 
            DECLARE @tablename AS TABLE(
                columns
                .
                .
                .
            );

    User-Define Functions (pretty much SELECT queries)
        CREATE FUNCTION functionname(parameters) 
        RETURNS type 
        AS 
        BEGIN 
            Content
            RETURN value
        END

        can have table valued functions: functions that return tables

        BEGIN and END are necessary only for more than one statement 

        Functions can have schemabinding 
    
    Stored Procedures or just Procedures 
        Where functions only read data from the database, Procedures can modify the database
        must use the EXCUTE keyword 
        no return value but can have multiple input and output variables 

    Triggers
        AFTER, INSTEAD OF 
        CREATE TRIGGER triggername ON tablename 
        (AFTER or INSTEAD OF) (UPDATE, INSERT, DELETE)
        AS
        BEGIN
            Content
        END 
    
    Transactions
        ACID properties of a transaction 
            Atomic
                the operation succeeds entirely or has no effect 
                no partial success is allowed 
            Consistent 
                not allowed to violate database constraints 
            Isolated 
                concurrent transactions should not be able to interfere with each other 
            Durable
                the transaction is not considered done until it's written to permanent 
                    (non-volatile) storage 

        SQL in general supports transactions with 
        BEGIN TRAN 
        COMMIT TRAN 

        IN T-SQL, every statement is already its own transaction 
            but we can have multi-statement transactions w/
                BEGIN and COMMIT TRANSACTION 
        ROLLBACK TRANSACTION undoes transaction up to latest or specified savepoint
        SAVE TRANSACTION creates a savepoint 

        Isolation levels
            dirty read - read_uncommited allows dirty read
                nonrepeatable read - read_commited(Default in SQL Server) prevents dirty read
                    repeatable prevents nonrepeatable
                        phantom read 
                            serializable prevents phantom read 


Entity Framework Core 
    Object Relational Mapper (ORM)
        software that translates between SQL and Object-oriented data and operations 
        java - Hibernate
        .NET Framework - Entity Framework (EF) 
        .NET Core - EF Core 
        Dapper(lightweight 3rd party)
    Before ORMs, there was ADO.NET to directly send SQL strings 
    EF is built on top of ADO.NET 

    EF classes:
        DbContext - represents a whole database
        DbSet<T> - represents a table corresponding to class<T>
    our classes: (the "model") 
        MyAppDbContext - inherit from DbContext, adding DbSet properties for each table, + config 
        one class per table with properties matching the columns 
    Designing
        2 approaches: 
            data-base first: (reverse engineering or scaffolding)
                create SQL database first
                use EF to generate code based on the database for the model
                any tim e the data structure needs to change, we modify the database first and then re-generate the model 
            code-first: (migrations)
                write the model by hand in C#
                use EF to generate migrations 
                use EF to apply migrations(create and modify the database)
                any time the data structure needs to change, we modify the C# classes(model), and   
                    then generate a migration and apply it to the database 
    Run-time:
        MyAppDbContext objects  
            DbSet objects 
                entities 
        communicates with SQL rows 

    EF by default loads one table at a time
    There are 3 ways to tell EF to fill other tables in 

    1. eager loading: call Include and maybe ThenInclude methods(do this)
    2. Lazy loading: can be eenabled in the dbcontext options (don't do this)
        it will load each navigation property in the moment you access it
        this causes queries for each time you want to load a new table 
    3. explicit loading (rarely used): given an actual object taken from the context we can tell EF to fill in indvidual properties 

    Good practices with EF:
    1. pay attention to when the query is actually sent to the DB 
    2. try to get all the data you need at a given moment in  one query rather than several 
    3. use eager loading (Include) rather than lazy or explicit 

    Update
        every object that you pull from the context is "tracked" by the context when you call SaveChanges,
            the context will send all changes that have been noticed automatically on the tracked entities 
    delete
        first get the object you want to remove then delete and save changes 